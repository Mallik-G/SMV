@startuml

hide empty methods
hide empty fields
hide circle

package SMV {
  class SmvDataSet <<Abstract>>{
    -app: SmvApp
    +{abstract} requiresDS() : Seq[SmvDataSet]
    +{abstract} computeRDD(): DataFrame
    +rdd(): SRDD
    +name: String
    +version: Int
    +description: String
    +classCodeCRC: Int
    +validations: ValidationSet
    +hashOfHash: Int
    +isEphemeral: Boolean
    +injectApp(app: SmvApp): Unit
  }

  class SmvFile <<Abstract>> extends SmvDataSet {
    +basePath : String
    +failAtParsingError: Boolean
    +parserValidator: ParserValidation
    +run(df: DataFrame): DataFrame
  }

  class SmvCsvFile extends SmvFile {
    +csvAttributes : CsvAttributes
    +schemaPath: String
  }

  class SmvFrlFile extends SmvFile {
    +schemaPath: String
  }

  class SmvModule <<Abstract>> extends SmvDataSet {
    +{abstract} run(in: runParams) : DataFrame
  }

  class SmvCsvData extends SmvModule {
    +schemaStr: String
    +data: String
    +cnstr(schemaStr, data)
  }

  class SmvApp {
    -sc: SparkContext
    -sqlContext: SQLContext
    -smvConfig: SmvConfig
    +resolveRDD(ds: SmvDataSet): DataFrame
    +createDF(schemaStr:String, data: String): DataFrame
    +run()
  }

  SmvApp *-R- "*" SmvDataSet
}

package ExampleApp {
  class Module1 extends SmvModule {
    +override version()
    +override requiresDS()
    +override run(inputs)
  }
  class Module2 extends SmvModule {
    +override version()
    +override requiresDS()
    +override run(inputs)
  }
  class File1 extends SmvCsvFile {
    +basePath
    +csvAttributes
    +override run(df)
  }
}
@enduml
