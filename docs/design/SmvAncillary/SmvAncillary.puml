@startuml
hide empty methods
hide empty fields
hide circle

namespace smv {
  class SmvAncillary <<Abstract>> {
    requiresDS(): Seq[SmvModuleLink]
    ~getDF(ds: SmvModuleLink): DataFrame
  }

  class SmvHierarchy {
    name: String
    hierarchyMap: SmvOutput
    hierarchy: Seq[String]
  }

  class SmvHierarchies extends SmvAncillary {
    prefix: String
    hierarchies: Seq[SmvHierarchy]
    -requiresDS(): Seq[SmvModuleLink]
    applyToDf(df: DataFrame): DataFrame
  }

  class SmvHierarchyFuncs <<private>> {
    hierarchy: SmvHierarchies
    df: DataFrame
    - additionalKeys: Seq[String]
    - hasNameCol: Boolean
    - parentColHierName: Option[String]

    cnstr(hierarchy, df, additionalKeys, hasNameCol, parentColHierName)
    hierGroupBy(keys: String*): SmvHierarchyFuncs
    withNameCol(): SmvHierarchyFuncs
    withParentCols(hierName: String): SmvHierarchyFuncs

    levelRollup(levels: String*)(aggregations: Column*)
    levelSum(levels: String*)(valueCols: String*)
    allRollup(aggregations: Column*)
    allSum(valueCols: String*)
  }

  class SmvHierarchyUser {
    addHierToDf(hierarchy: SmvHierarchies, df: DataFrame): SmvHierarchyFuncs
  }

  class SmvModule {
    requiresAnc() : Seq[SmvAncillary] = Seq.empty
    ~getAncillary(SmvAncillary) : SmvAncillary
  }

  SmvHierarchyFuncs *-L- "1" SmvHierarchies
  SmvHierarchies *-- "n" SmvHierarchy
}

namespace myapp {
  class ZipHier extends smv.SmvHierarchies
  class MyModule extends smv.SmvHierarchyUser
  class MyModule extends smv.SmvModule

  MyModule -L-> "requires" ZipHier
}

@enduml
