#!/bin/bash

QUITE_MODE=0
if [ "$1" = "-q" ]; then
    QUITE_MODE=1
    shift
fi

TEMPLATE_DIR="$(cd "`dirname "$0"`"; pwd)/templates"

# PROJ_TYPE:
#  - simple (default)
#  - enterprise
#  - test
PROJ_TYPE="simple"

if [ "$1" = "-s" ] || [ "$1" = "-simple" ]; then
  PROJ_TYPE="simple"
  shift
fi

if [ "$1" = "-e" ] || [ "$1" = "-enterprise" ]; then
  PROJ_TYPE="enterprise"
  shift
fi

if [ "$1" = "-t" ] || [ "$1" = "-test" ]; then
  PROJ_TYPE="test"
  shift
fi

TEMPLATE_DIR+="/$PROJ_TYPE"

if [ $# -ne 2 ]; then
    echo "ERROR: Invalid number of arguments"
    echo "USAGE: $0 [-q] [-s|-e|-t] project_name base_project_class"
    echo "project types:"
    echo "  -s: simple (default)"
    echo "  -e: enterprise"
    echo "  -t: test (for developers only)"
    echo "example:"
    echo "  \$ $0 MyProject com.mycompany.myproj"
    echo ""
    echo "In the above example, the group id of the project will be 'com.mycompany'"
    echo "and the artifact id will be 'myproj'"
    exit 1
fi

PROJ_DIR="$1"
PROJ_CLASS="$2"

if [ "$PROJ_TYPE" = "simple" ]; then
  PROJ_CLASS="org.tresamigos.myapp"
fi

function extract_group_artifact_ids()
{
    PROJ_GROUP_ID="${PROJ_CLASS%.*}"
    PROJ_ARTIFACT_ID="${PROJ_CLASS##*.}"

    if [ "$PROJ_GROUP_ID" == "$PROJ_ARTIFACT_ID" ]; then
        echo "Invalid project class: $PROJ_CLASS"
        echo "the class must have at least two levels a.b"
        exit 1
    fi
}

function create_proj_dir()
{
    echo "-- creating project directory"

    if [ -d "$PROJ_DIR" ]; then
      echo "$PROJ_DIR already exists"
      exit 1
    fi

    mkdir "$PROJ_DIR"
    export PROJ_DIR_FULL_PATH=$(cd $PROJ_DIR; /bin/pwd)
}

function copy_with_inject()
{
    SRC="$1"
    DST="$2"
    echo "-- copying `basename "$DST"`"

    ESCAPED_FULL_PATH=$(echo ${PROJ_DIR_FULL_PATH}|sed -e 's/[\/&]/\\&/g')

    mkdir -p "$(dirname "$DST")"
    sed -e "s/_GROUP_ID_/$PROJ_GROUP_ID/" \
        -e "s/_ARTIFACT_ID_/$PROJ_ARTIFACT_ID/" \
        -e "s/_PROJ_CLASS_/$PROJ_CLASS/g" \
        -e "s/_PROJ_DIR_FULL_PATH_/${ESCAPED_FULL_PATH}/g" \
        < "$SRC" > "$DST"
}

function copy_conf_files()
{
    FILES="pom.xml build.sbt project/assembly.sbt project/build.properties README.md notebooks/Untitled.ipynb .gitignore.template log4j.properties conf/shell_init.scala conf/smv-app-conf.props conf/smv-user-conf.props"
    for f in $FILES; do
        copy_with_inject "$TEMPLATE_DIR/$f" "$PROJ_DIR/$f"
    done

    # .gitignore was postfixed with .template so it does not affect SMV's git repo
    mv "$PROJ_DIR/.gitignore.template" "$PROJ_DIR/.gitignore"
}

function copy_data_files()
{
    echo "-- copying data files"

    cp -R "${TEMPLATE_DIR}/data" "$PROJ_DIR"
}

function copy_src_dir()
{
    subdir=$1
    proj_cp=$2
    DST_DIR="${PROJ_DIR_FULL_PATH}/src/${subdir}/${proj_cp}"

    (cd ${TEMPLATE_DIR}/src/${subdir}; find . -type f | while read f; do
      SRC_FILE="${TEMPLATE_DIR}/src/${subdir}/$f"
      DST_FILE="${DST_DIR}/$f"
      copy_with_inject "$SRC_FILE" "$DST_FILE"
    done)
}

function copy_src_files()
{
    echo "-- copying source files"

    PROJ_CLASS_PATH="`echo $PROJ_CLASS | sed -e 's/\./\//g'`"

    if [ "$PROJ_TYPE" = "simple" ] || [ "$PROJ_TYPE" = "enterprise" ]; then
      for subdir in main/python; do
          copy_src_dir ${subdir} ${PROJ_CLASS_PATH}
      done
    else
      for subdir in main/scala main/python; do
          copy_src_dir ${subdir} ${PROJ_CLASS_PATH}
      done
    fi
}

function create_python_packages()
{
    for dir in $(ls -d ${PROJ_DIR_FULL_PATH}/src/main/python/*/); do
        find ${dir} -type d -print0 | xargs -0 -I\{\} touch \{\}/__init__.py
    done
}

# --- MAIN ---
extract_group_artifact_ids
create_proj_dir
copy_conf_files
copy_data_files
copy_src_files
create_python_packages
